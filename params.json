{"name":"Geb-sample","tagline":"浏览器自动化(Geb)测试示例","body":"# Geb 测试示例\r\n\r\n## 效果图\r\n\r\n![sample](sample.gif)\r\n\r\n\r\n## 依赖及安装\r\n\r\n* jdk1.7+\r\n* gradle/maven (2选1)\r\n* groovy2.3+\r\n\r\n### jdk1.7 安装(略)\r\n\r\n### gradle 安装\r\n\r\n1 [下载](http://gradle.org/gradle-download/)\r\n\r\n2 解压\r\n\r\n3 设置环境变量：添加`GRADLE_HOME`环境变量指向解压包路径，将`GRADLE_HOME/bin`添加到`path`中。\r\n\r\n4 测试安装是否成功：打开命令行，输入`gradle -v`\r\n\r\n### maven 安装(略)\r\n\r\n### groovy 安装\r\n\r\n可以通过`gradle`的包管理功能自动进行安装，无需另外安装。如下代码：\r\n\r\n```\r\ncompile \"org.gebish:geb-core:0.12.2\"\r\ncompile \"org.seleniumhq.selenium:selenium-firefox-driver:2.45.0\"\r\ncompile \"org.seleniumhq.selenium:selenium-support:2.45.0\"\r\n```\r\n\r\n## 运行测试\r\n\r\n安装完依赖后，下载本示例项目。\r\n\r\n在项目根目录中打开命令行窗口，然后输入`gradle test`，将运行项目下的所有功能测试。\r\n\r\n\r\n## 使用\r\n\r\n### 配置\r\n\r\n`Geb`默认的配置文件名为`GebConfig.groovy`。\r\n\r\n* baseUrl\r\n\r\n在配置文件中设置了`baseUrl`后，我们即可在编写测试时直接使用相对路径来定位页面。\r\n\r\n配置文件中设置如下\r\n```groovy\r\nbaseUrl = 'http://myapp.com/'\r\n```\r\n\r\n\r\n测试类\r\n```grooby\r\n{\r\n\tgo \"abc\"\r\n}\r\n```\r\n\r\n则网址为：`http://myapp.com/abc`\r\n\r\n* 浏览器支持\r\n\r\n`WebDriver`默认支持`FireFox`，若要使用其他浏览器进行测试，需要下载相关的`driver`。\r\n如`chrome`浏览器需要下载`chromedriver`(本项目已包含，不需要另外下载)。\r\n更多内容请查看官方文档。\r\n\r\n\r\n### API 语法参考\r\n\r\n#### 常用\r\n\r\n* `go`: 导航至指定页面\r\n\r\n* `to`: 导航至`Page`类定义的页面\r\n\r\n* `waitFor`: 等待页面响应\r\n\r\n```groovy\r\n// 等待页面标题等于某个值\r\nwaitFor { title == \"Page Title\" }\r\n\r\n// 語法\r\nwaitFor {} // 預設的等待時間\r\nwaitFor(10) {} // 最長等待時間為 10 秒\r\nwaitFor(10, 0.5) {} // 最長等待時間為 10 秒，每次判斷條件的間隔時間為 0.5 秒\r\nwaitFor(\"quick\") {} // 依照自定的等待時間\r\n```\r\n使用`waitFor`时，不要使用引用对象，若使用，则每次检查的都是同一个对象\r\n\r\n\r\n\r\n#### Navigator API\r\n\r\n在编写浏览器自动化测试时，需要大量的`DOM`操作，\r\n幸好`Geb`提供了类似`jQuery`的选择器，让我们可以轻松的找到一个`DOM`。\r\n\r\n* $() 方法\r\n\r\n用法与`jQuery`类似\r\n\r\n语法结构：\r\n\r\n```groovy\r\n$([css选择器], [index 或 range], [DOM 元素 attribute 或 text matchers])\r\n```\r\n如:\r\n\r\n```groovy\r\n$(\"div p\", 0)\r\n$(\"div p\", title: \"something\")\r\n$(0)\r\n$(title: \"something\")\r\n\r\n$(\"p\", 0..1)*.text()\r\n$(\"p\", text: \"p1\").size()\r\n$(\"p\", text: \"p1\", class: \"a\").size()\r\n\r\n// 正则表达式\r\n$(\"p\", text: ~/p./)\r\n$(\"p\", text: startsWith(\"p\"))\r\n$(\"p\", text: endsWith(\"2\"))\r\n$(\"p\", text: contains(~/\\d/)).\r\n```\r\n\r\n`Geb`提供以下正则表达式方法\r\n\r\n| 方法名 | 描述  |\r\n|----------|---------|\r\n| startsWith |       |\r\n| contains |       |\r\n| endsWith |       |\r\n| containsWord |       |\r\n| notStartsWith |       |\r\n| notContains |       |\r\n| notEndsWith |       |\r\n| notContainsWord |       |\r\n\r\n* 查找与过滤方法\r\n\r\n```groovy\r\n// 这两个是一样的\r\n$(\"div\").find(\".b\")\r\n$(\"div\").$(\".b\")\r\n\r\n// 获取 class=b 的 div\r\n$(\"div\").filter(\".b\")\r\n\r\n// 获取不包含 p 且 class=b 的 DOM\r\n$(\".b\").not(\"p\")\r\n\r\n$(\"div\").hasNot(\"p\")\r\n$(\"div\").hasNot(\"input\", type: \"text\")\r\n\r\n// 获取包含 p 的 div\r\n$(\"div\").has(\"p\")\r\n\r\n$(\"div\").has(\"input\", type: \"text\")\r\n```\r\n\r\n* 遍历方法\r\n\r\n```groovy\r\n$(\"p.d\").previous()\r\n$(\"p.e\").prevAll()\r\n$(\"p.d\").next()\r\n$(\"p.c\").nextAll()\r\n$(\"p.d\").parent()\r\n$(\"p.c\").siblings()\r\n$(\"div.a\").children()\r\n```\r\n\r\n* 模拟点击\r\n\r\n```groovy\r\n$(\"a.login\").click()\r\n```\r\n\r\n* 大小与定位\r\n\r\n```groovy\r\n$(\"div\").height == 20\r\n$(\"div\").width == 40\r\n$(\"div\").x == 20\r\n$(\"div\").y == 10\r\n```\r\n\r\n* Accessing tag name, attributes, text and classes\r\n\r\n```html\r\n<p title=\"a\" class=\"a para\">a</p>\r\n<p title=\"b\" class=\"b para\">b</p>\r\n<p title=\"c\" class=\"c para\">c</p>\r\n```\r\n\r\n```groovy\r\nassert $(\"p\").text() == \"a\"\r\nassert $(\"p\").tag() == \"p\"\r\nassert $(\"p\").@title == \"a\"\r\nassert $(\"p\").classes() == [\"a\", \"para\"]\r\n```\r\n\r\n* CSS 属性\r\n\r\n```groovy\r\nassert $(\"div\").css(\"float\") == \"left\"\r\n```\r\n\r\n* 模拟键盘输入\r\n\r\n```groovy\r\n// 模拟输入 foo\r\n$(\"input\") << \"foo\"\r\nassert $(\"input\").value() == \"foo\"\r\n\r\n// 模拟输入 Ctrl+C\r\n$(\"input\") << Keys.chord(Keys.CONTROL, \"c\")\r\n\r\n```\r\n\r\n* 复杂交互\r\n\r\n1 直接使用`WebDriver API`的`WebElement`\r\n\r\n2 使用`Actions`类\r\n\r\n```groovy\r\ndef actions = new Actions(driver)\r\nWebElement someItem = $(\"li.clicky\").firstElement()\r\ndef shiftClick = actions.keyDown(Keys.SHIFT).click(someItem).keyUp(Keys.SHIFT).build()\r\nshiftClick.perform()\r\n```\r\n\r\n3 使用闭包\r\n\r\n```groovy\r\ninteract {\r\n    keyDown Keys.SHIFT\r\n    click $(\"li.clicky\")\r\n    keyUp Keys.SHIFT\r\n}\r\n```\r\n\r\n4 列子\r\n\r\n拖放\r\n\r\n```groovy\r\ninteract {\r\n    clickAndHold($('#draggable'))\r\n    moveByOffset(150, 200)\r\n    release()\r\n}\r\n// 或者\r\ninteract {\r\n    dragAndDropBy($(\"#draggable\"), 150, 200)\r\n}\r\n// 或者\r\ninteract {\r\n    dragAndDrop($(\"#draggable\"), $(\"#droppable\"))\r\n}\r\n```\r\n\r\nCtrl+单击\r\n\r\n```groovy\r\nimport org.openqa.selenium.Keys\r\n\r\ninteract {\r\n    keyDown(Keys.CONTROL)\r\n    click($(\"ul.multiselect li\", text: \"Order 1\"))\r\n    click($(\"ul.multiselect li\", text: \"Order 2\"))\r\n    click($(\"ul.multiselect li\", text: \"Order 3\"))\r\n    keyUp(Keys.CONTROL)\r\n}\r\n```\r\n\r\n滚动条\r\n```groovy\r\nActions actions = new Actions(driver)\r\nactions.moveToElement(driver.findElement(By.id('tab'))).perform()\r\n// 或者\r\ninteract {\r\n            clickAndHold($('#tab'))\r\n            release()\r\n}\r\n// 或者\r\ninteract {\r\n            click(theUI)\r\n}\r\n// 或者\r\ninteract {\r\n            moveToElement(theUI)\r\n}\r\n// 或者使用 js (略)\r\n```\r\n\r\n\r\n### 操作 Frame\r\n\r\n(略)\r\n\r\n\r\n### 操作 javascript, AJAX 和 动态页面\r\n\r\n(略)\r\n\r\n\r\n### 处理下载\r\n\r\n(略)\r\n\r\n\r\n### Scripts and binding\r\n\r\n(略)\r\n\r\n\r\n### 测试报告\r\n\r\n(略)\r\n\r\n\r\n### 测试框架集成\r\n\r\n(略)\r\n\r\n\r\n### 其他\r\n\r\n`Geb`可以通过继承`Page`类实现页面的重复使用。\r\n\r\n通过继承`Module`类实现局部页面以便于重复使用。\r\n\r\n\r\n**模拟点击`Alert()`**：\r\n\r\n```java\r\ndriver.switchTo().alert().accept();\r\n```\r\n\r\n更多内容请参考官方文档\r\n\r\n\r\n\r\n\r\n***\r\n\r\n## 参考\r\n\r\n* [Geb 官方文档](http://www.gebish.org/manual/current)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}